<section class="hero is-primary">
    <div class="hero-body py-2">
        <div class="container is-max-desktop">
            <div class="columns">
                <div class="column is-8 is-offset-2">
                    <div class="field">
                        <div class="control has-icons-right">
                            <form class="m-0" action="/books">
                                <input class="input is-rounded" type="text" name="name" placeholder="Pan Tadeusz" />
                            </form>
                            <span class="icon is-small is-right">
                                <svg aria-hidden="true" id="icon-search" width="18" height="18" viewBox="0 0 18 18">
                                    <path
                                        d="M18 16.5l-5.14-5.18h-.35a7 7 0 10-1.19 1.19v.35L16.5 18l1.5-1.5zM12 7A5 5 0 112 7a5 5 0 0110 0z">
                                    </path>
                                </svg>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<section class="hero">
    <div class="hero-body px-0 py-0" id="slider-bg">
        <div class="container">
            <div class="elements-list" id="slider1">
                <article class="element is-flex is-justify-content-center" id="s1">

                </article>
                <article class="element" id="s2">

                </article>
                <article class="element" id="s3">

                </article>
            </div>
        </div>
    </div>
</section>


<section class="hero is-primary">
    <div class="hero-body">
        <div id="stats" class="container">
            <div class="columns is-align-items-stretch">
                <div class="column">
                    <div class="box notification is-light has-text-centered">
                        <div id="stat-products-sold" class="is-size-2 has-text-weight-bold stat-counter" data-value="{{stats.products}}">{{stats.products}}</div>
                        <p class="is-italic">produktów w katalogu</p>
                    </div>
                </div>
                <div class="column">
                    <div class="box notification is-light has-text-centered">
                        <div id="stat-orders-placed" class="is-size-2 has-text-weight-bold stat-counter" data-value="{{stats.orders}}">{{stats.orders}}</div>
                        <p class="is-italic">złożonych zamówień</p>
                    </div>
                </div>
                <div class="column">
                    <div class="box notification is-light has-text-centered">
                        <div id="stat-users-registered" class="is-size-2 has-text-weight-bold stat-counter" data-value="{{stats.users}}">{{stats.users}}</div>
                        <p class="is-italic">zarejestrowanych użytkowników</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script type="module" defer>
    const stats = document.getElementById("stats");
    const statCounters = document.getElementsByClassName("stat-counter");

    const makeCounterAnimation = (duration, timeFunction) => () => {
        let start = null;

        const frame = timestamp => {
            if (start === null) start = timestamp;

            if (timestamp - start < duration) {
                for (const counter of statCounters) {
                    counter.textContent = Math.ceil(counter.dataset.value * timeFunction((timestamp - start) / duration));
                }

                window.requestAnimationFrame(frame);
            }
            else {
                for (const counter of statCounters) {
                    counter.textContent = counter.dataset.value;
                }
            }
        };

        window.requestAnimationFrame(frame);
    };

    const animateCounters = makeCounterAnimation(2000, x => 1 - (1 - x) ** 3);

    new IntersectionObserver((entries, observer) => {
        for (const entry of entries) {
            if (entry.isIntersecting) {
                animateCounters();
                observer.unobserve(entry.target);

                break;
            }
        }
    }, { threshold: 0.0 }).observe(stats);
</script>
<script src="/js/slider.js" defer></script>
<script src="/js/sliderContentBooks.js" type="module" defer></script>